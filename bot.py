"""
–¢–∞–π–º–µ—Ä-–±–æ—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–ø–∏—Å–∫–æ–≤ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è
Python 3.11+, python-telegram-bot 20.x
"""

import os
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, List

import pathlib
from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)

load_dotenv()
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.WARNING,
)

BOT_TOKEN: str = os.getenv("BOT_TOKEN", "")
GROUP_ID: int = -1002557055751
ADMIN_ID: int = 5948759106
WELCOME_IMAGE: str = str(pathlib.Path(__file__).with_name("welcome.jpg"))

SERVER, PARKING, TIME = range(3)
timers: Dict[int, List[Dict[str, Any]]] = {}
running_loops: Dict[int, asyncio.Task] = {}

# ------------------------------------------------------------------
# –£—Ç–∏–ª–∏—Ç—ã
# ------------------------------------------------------------------
def fmt(td: timedelta) -> str:
    total = int(td.total_seconds())
    h, rem = divmod(total, 3600)
    m, s = divmod(rem, 60)
    return f"{h:02d}:{m:02d}:{s:02d}"

def build_text(chat_id: int) -> str:
    if chat_id not in timers or not timers[chat_id]:
        return "‚ùå–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤."
    lines = []
    for idx, t in enumerate(timers[chat_id], 1):
        left = t["end"] - datetime.utcnow()
        if left.total_seconds() <= 0:
            continue
        lines.append(
            f"{idx}. üî∏–°–µ—Ä–≤–µ—Ä {t['server']}, –ø–∞—Ä–∫–æ–≤–∫–∞ {t['parking']}: {fmt(left)}"
        )
    return "\n".join(lines) if lines else "‚ùå–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤."

main_kb = ReplyKeyboardMarkup(
    [["‚ûï–î–æ–±–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä", "üì§–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫"]],
    resize_keyboard=True,
)

# ------------------------------------------------------------------
# Conversation
# ------------------------------------------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_chat.id
    if not context.user_data.get("seen_welcome"):
        text = (
            "üëã *–ü—Ä–∏–≤–µ—Ç, —è —Ç–∞–π–º–µ—Ä-–±–æ—Ç!*\n\n"
            "üîπ –ù–∞–∂–º–∏ *¬´–î–æ–±–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä¬ª* –∏ –≤–≤–µ–¥–∏:\n"
            "1Ô∏è‚É£ –ù–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞\n"
            "2Ô∏è‚É£ –ù–æ–º–µ—Ä –ø–∞—Ä–∫–æ–≤–∫–∏\n"
            "3Ô∏è‚É£ –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ß–ß:–ú–ú:–°–°`\n\n"
            "üîπ –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏ *¬´–û–±–Ω–æ–≤–∏—Ç—å¬ª* –≤ —Å–ø–∏—Å–∫–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è.\n\n"
            "üîπ –ö–æ–≥–¥–∞ –≤–Ω–µ—Å—ë—à—å –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã ‚Äî –Ω–∞–∂–º–∏ *¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫¬ª*.\n"
            "  –°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –∏ –≤ –≥—Ä—É–ø–ø—É *¬´–¢–µ–º–Ω–∞—è –ª–∏–≥–∞¬ª*, –∏ –≤–∞–º –≤ –ª–∏—á–∫—É."
        )
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=WELCOME_IMAGE,
            caption=text,
            parse_mode="Markdown",
            reply_markup=main_kb,
        )
        context.user_data["seen_welcome"] = True
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞:", reply_markup=main_kb)
    return SERVER

async def get_server(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["server"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Ä–∫–æ–≤–∫–∏:", reply_markup=main_kb)
    return PARKING

async def get_parking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["parking"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:–°–°:", reply_markup=main_kb)
    return TIME

async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        h, m, s = map(int, update.message.text.split(":"))
        delta = timedelta(hours=h, minutes=m, seconds=s)
    except Exception:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ß–ß:–ú–ú:–°–°:", reply_markup=main_kb
        )
        return TIME

    server = context.user_data["server"]
    parking = context.user_data["parking"]
    end = datetime.utcnow() + delta
    chat_id = update.effective_chat.id

    timers.setdefault(chat_id, [])
    timers[chat_id].append({"end": end, "server": server, "parking": parking, "warned": False})

    if chat_id not in running_loops or running_loops[chat_id].done():
        running_loops[chat_id] = context.application.create_task(timer_loop(chat_id, context))

    msg = await update.message.reply_text(
        build_text(chat_id),
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("üîÑ–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"upd_chat_{chat_id}")]]
        ),
    )
    context.chat_data["msg_id"] = msg.message_id
    await update.message.reply_text("–¢–∞–π–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ", reply_markup=main_kb)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_kb)
    return ConversationHandler.END

# ------------------------------------------------------------------
# Callback ¬´–î–æ–±–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä¬ª (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞)
# ------------------------------------------------------------------
async def add_more(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞:", reply_markup=main_kb)
    return SERVER

# ------------------------------------------------------------------
# –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤ –≥—Ä—É–ø–ø—É –∏ –ª–∏—á–∫—É
# ------------------------------------------------------------------
async def send_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    if chat_id not in timers or not timers[chat_id]:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤", reply_markup=main_kb)
        return

    text_to_send = build_text(chat_id)

    # –≥—Ä—É–ø–ø–∞
    old_gid = context.bot_data.get("group_msg_id", {}).get(chat_id)
    if old_gid:
        try:
            await context.bot.edit_message_text(
                "‚ùå –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤–Ω–∏–∑",
                chat_id=GROUP_ID,
                message_id=old_gid,
            )
        except Exception:
            pass
    try:
        g_msg = await context.bot.send_message(
            GROUP_ID,
            text_to_send,
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üîÑ–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"upd_group_{chat_id}")]]
            ),
        )
        context.bot_data.setdefault("group_msg_id", {})[chat_id] = g_msg.message_id
    except Exception as e:
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤ –≥—Ä—É–ø–ø—É: %s", e)

    # –ª–∏—á–∫–∞ –∞–¥–º–∏–Ω–∞
    old_aid = context.bot_data.get("admin_msg_id", {}).get(chat_id)
    if old_aid:
        try:
            await context.bot.edit_message_text(
                "‚ùå –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤–Ω–∏–∑",
                chat_id=ADMIN_ID,
                message_id=old_aid,
            )
        except Exception:
            pass
    try:
        a_msg = await context.bot.send_message(
            ADMIN_ID,
            text_to_send,
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üîÑ–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"upd_admin_{chat_id}")]]
            ),
        )
        context.bot_data.setdefault("admin_msg_id", {})[chat_id] = a_msg.message_id
    except Exception as e:
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω—É: %s", e)

    await update.message.reply_text("üì§ –°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∏ –∞–¥–º–∏–Ω—É –≤ –ª–∏—á–∫—É", reply_markup=main_kb)

# ------------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´–û–±–Ω–æ–≤–∏—Ç—å¬ª –¥–ª—è —á–∞—Ç–∞, –≥—Ä—É–ø–ø—ã –∏ –∞–¥–º–∏–Ω–∞
# ------------------------------------------------------------------
async def refresh(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    try:
        _prefix, _place, chat_id_str = query.data.split("_", 2)
    except ValueError:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback")
        return

    chat_id = int(chat_id_str)
    target_chat = {
        "group": GROUP_ID,
        "admin": ADMIN_ID,
        "chat": chat_id,
    }.get(_place)

    if not target_chat or chat_id not in timers or not timers[chat_id]:
        await query.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤")
        return

    try:
        await context.bot.edit_message_text(
            build_text(chat_id),
            chat_id=target_chat,
            message_id=query.message.message_id,
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üîÑ–û–±–Ω–æ–≤–∏—Ç—å", callback_data=query.data)]]
            ),
        )
    except Exception as e:
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å: %s", e)
    await query.answer()

# ------------------------------------------------------------------
# –§–æ–Ω–æ–≤—ã–π —Ü–∏–∫–ª ‚Äî —Ç–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è + –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤
# ------------------------------------------------------------------
async def timer_loop(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    while True:
        if chat_id not in timers:
            break

        now = datetime.utcnow()
        new_list = []
        changed = False  # —Ñ–ª–∞–≥: –±—ã–ª–∏ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è

        for t in timers[chat_id]:
            left = t["end"] - now
            left_seconds = int(left.total_seconds())

            if left_seconds <= 0:
                changed = True
                continue  # —É–¥–∞–ª—è–µ–º –∏—Å—Ç—ë–∫—à–∏–µ

            if left_seconds <= 120 and not t.get("warned"):
                text = (
                    f"‚ö†Ô∏è –û–±—â–∏–π —Å–±–æ—Ä! –°–µ—Ä–≤–µ—Ä {t['server']}, –ø–∞—Ä–∫–æ–≤–∫–∞ {t['parking']} ‚Äì "
                    f"–æ—Å—Ç–∞–ª–æ—Å—å 2 –º–∏–Ω—É—Ç—ã!\n"
                    f"@Evgeny_404"
                )
                try:
                    await context.bot.send_message(chat_id, text)
                    await context.bot.send_message(GROUP_ID, text)
                    await context.bot.send_message(ADMIN_ID, text)
                except Exception as e:
                    logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: %s", e)
                t["warned"] = True

            new_list.append(t)

        if changed or (new_list != timers[chat_id]):
            timers[chat_id] = new_list
            await update_all_lists(chat_id, context)

        await asyncio.sleep(5)

# ------------------------------------------------------------------
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
# ------------------------------------------------------------------
async def update_all_lists(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    text = build_text(chat_id)

    # 1. –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏—á–Ω—ã–π —á–∞—Ç
    msg_id = context.chat_data.get("msg_id")
    if msg_id:
        try:
            await context.bot.edit_message_text(
                text,
                chat_id=chat_id,
                message_id=msg_id,
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("üîÑ–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"upd_chat_{chat_id}")]]
                ),
            )
        except Exception:
            pass

    # 2. –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É
    g_id = context.bot_data.get("group_msg_id", {}).get(chat_id)
    if g_id:
        try:
            await context.bot.edit_message_text(
                text,
                chat_id=GROUP_ID,
                message_id=g_id,
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("üîÑ–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"upd_group_{chat_id}")]]
                ),
            )
        except Exception:
            pass

    # 3. –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏—á–∫—É –∞–¥–º–∏–Ω–∞
    a_id = context.bot_data.get("admin_msg_id", {}).get(chat_id)
    if a_id:
        try:
            await context.bot.edit_message_text(
                text,
                chat_id=ADMIN_ID,
                message_id=a_id,
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("üîÑ–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"upd_admin_{chat_id}")]]
                ),
            )
        except Exception:
            pass

# ------------------------------------------------------------------
# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# ------------------------------------------------------------------
def main() -> None:
    app = Application.builder().token(BOT_TOKEN).build()
    conv = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            CallbackQueryHandler(add_more, pattern="^add_more$"),
            MessageHandler(filters.Regex("^‚ûï–î–æ–±–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä$"), start),
        ],
        states={
            SERVER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_server)],
            PARKING: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_parking)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_time)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv)
    app.add_handler(MessageHandler(filters.Regex("^üì§–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫$"), send_list))
    app.add_handler(CallbackQueryHandler(refresh, pattern=r"^upd_"))
    app.run_polling()

if __name__ == "__main__":
    main()